{
  "root": true,
  "ignorePatterns": ["projects/**/*"],
  "env": { "browser": true, "es6": true, "node": true, "jasmine": true },
  "plugins": ["unused-imports"],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "tsconfig.json",
    "sourceType": "module"
  },
  "rules": {
    "no-unused-vars": "off",
    "unused-imports/no-unused-imports": "error",
    "unused-imports/no-unused-vars": [
      "warn",
      {
        "vars": "all",
        "varsIgnorePattern": "^_",
        "args": "after-used",
        "argsIgnorePattern": "^_"
      }
    ],
    "sort-imports": ["error", { "ignoreDeclarationSort": true }]
  },
  "overrides": [
    {
      "files": ["*.ts"],
      "extends": [
        "eslint:recommended",
        "plugin:prettier/recommended",
        "plugin:@angular-eslint/recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@angular-eslint/template/process-inline-templates"
      ],
      "rules": {
        "no-alert": "error",
        "no-debugger": "error",
        "no-console": ["warn", { "allow": ["warn", "error", "clear"] }],
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": "off",
        "@typescript-eslint/no-for-in-array": "warn",
        "@typescript-eslint/no-empty-function": "off",
        "@typescript-eslint/no-inferrable-types": "off",
        "@typescript-eslint/no-empty-interface": "error",
        "@angular-eslint/no-empty-lifecycle-method": "off",
        "@typescript-eslint/explicit-function-return-type": [
          "error",
          { "allowHigherOrderFunctions": true }
        ],
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "interface",
            "format": ["PascalCase"],
            "prefix": ["I"]
          },
          {
            "selector": "enum",
            "format": ["PascalCase"],
            "prefix": ["E"]
          },
          {
            "selector": ["memberLike"], // memberLike === ('method' + 'property')
            "modifiers": ["public"],
            "format": ["camelCase"],
            "filter": { "regex": "^_", "match": true }
          },
          {
            "selector": ["method", "property"],
            "modifiers": ["private"],
            "format": ["camelCase"],
            "leadingUnderscore": "require",
            "filter": { "regex": "^_", "match": false }
          },
          {
            "selector": "typeLike",
            "format": ["PascalCase"]
          },
          {
            "selector": ["variable", "property"],
            "types": ["boolean"],
            "format": ["PascalCase"],
            "prefix": ["is", "should", "has", "can", "did", "will"],
            "filter": { "regex": "^.", "match": false }
          }
        ],
        "@angular-eslint/component-class-suffix": [
          "error",
          {
            "suffixes": ["Component", "Page"]
          }
        ],
        "@angular-eslint/component-selector": [
          "error",
          {
            "prefix": "app",
            "type": "element",
            "style": "kebab-case"
          }
        ],
        "@angular-eslint/directive-selector": [
          "error",
          {
            "prefix": ["app", "if"],
            "style": "camelCase",
            "type": "attribute"
          }
        ],
        "prettier/prettier": "warn"
      }
    },
    {
      "files": ["*.html"],
      "excludedFiles": ["*inline-template-*.component.html"],
      "extends": [
        "plugin:prettier/recommended",
        "plugin:@angular-eslint/template/recommended",
        "plugin:@angular-eslint/template/accessibility"
      ],
      "rules": {
        "prettier/prettier": ["error", { "parser": "angular" }]
      }
    }
  ]
}
